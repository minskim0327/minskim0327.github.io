{"componentChunkName":"component---src-app-pages-til-page-index-tsx","path":"/tils/DEV/database/relational/relationships","result":{"pageContext":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Relationships\"), mdx(\"h2\", null, \"Types\"), mdx(\"p\", null, \"There are mainly 3 types of relationships.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One to One (1 : 1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One to Many (1 : N)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many to Many (M : N)\")), mdx(\"h2\", null, \"One to One\"), mdx(\"p\", null, \"One record in a table is associated with one and only one record. For example, in a school database, each student has only one student ID, which is only assigned to only one person.\"), mdx(\"h2\", null, \"One to Many\"), mdx(\"p\", null, \"One record in a table is associated with one and only one record. For example, in a school database, each student has only one student ID, which is only assigned to only one person.\"), mdx(\"h2\", null, \"Parent-Child relationship.\"), mdx(\"p\", null, \"Parent and Child is both \\\"tables\\\".\"), mdx(\"p\", null, \"Parent table has primary key and Child/children table has foriegn key. The foreign key points to the primary key stored in the parent table. This parent-and-child relationsip is applicable to one-to-one/one-to-many relationship.\"), mdx(\"h2\", null, \"Many To Many\"), mdx(\"p\", null, \"Intermediary table acts as a \\\"child\\\" table for both two tables.\"));\n}\n;\nMDXContent.isMDXComponent = true;","toc":{"items":[{"url":"#relationships","title":"Relationships","items":[{"url":"#types","title":"Types"},{"url":"#one-to-one","title":"One to One"},{"url":"#one-to-many","title":"One to Many"},{"url":"#parent-child-relationship","title":"Parent-Child relationship."},{"url":"#many-to-many","title":"Many To Many"}]}]},"name":"relationships"}},"staticQueryHashes":["1694686584","3368942263"]}