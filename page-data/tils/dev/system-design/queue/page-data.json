{"componentChunkName":"component---src-app-pages-til-page-index-tsx","path":"/tils/dev/system-design/queue","result":{"pageContext":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"why do we need messaging? Think of pizza delivery example.\"), mdx(\"p\", null, \"messaging model => message queue / pubsub\"), mdx(\"p\", null, \"message queueing?\"), mdx(\"p\", null, \"message to a single instance of a service -> use message queue\"), mdx(\"p\", null, \"pubsub?\"), mdx(\"p\", null, \"notify multiple other services (one service notify multiple services)\\nafter payment -> billing service/receipt service\"), mdx(\"p\", null, \"rabbit mq?\\nAMQP protocol\\nmessage stored unitl consumers retrieves them\\noffloads heavy tasks\\ndistributes tasks\"), mdx(\"p\", null, \"routing keys\"), mdx(\"p\", null, \"rabbit mq message has the key and the address it needs to go to\"), mdx(\"p\", null, \"exchange\"), mdx(\"p\", null, \"direct message in the queue of the name\\ntopic/header exchange\\nfanout exchange\\nchannels\"), mdx(\"p\", null, \"ackowledgement\"), mdx(\"p\", null, \"tcp connectionsingle tcp connection, supplemented with channel\"), mdx(\"p\", null, \"best as message queue\"), mdx(\"p\", null, \"provicde concurrency through channel\\nreliability thorugh ackonolwedgment\\ncan also function as pub sub\"), mdx(\"p\", null, \"kafka?\"), mdx(\"p\", null, \"popular pubsub system\"), mdx(\"p\", null, \"event streaming platform\\nmessages are stored for a period of time\\nqueue = topic\\nmessage = event\"), mdx(\"p\", null, \"partition of message(event) by consumer\"), mdx(\"p\", null, \"higher throughput / latency\"), mdx(\"p\", null, \"consumer groups\"), mdx(\"p\", null, \"consumer offest\"));\n}\n;\nMDXContent.isMDXComponent = true;","toc":{},"name":"queue"}},"staticQueryHashes":["1694686584","3368942263"]}